/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.serivesmejia.DZipper.Frame;

import io.github.serivesmejia.DZipper.DZipper;
import java.io.File;
import java.io.IOException;
import java.nio.file.CopyOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.exception.ZipException;

/**
 *
 * @author Sebastian
 */
public class MainFrame extends javax.swing.JFrame {

    JFileChooser chooser;
    Boolean file = false;
    Logger logger;
    DefaultListModel jListModel1 = new DefaultListModel();
    File opened = null;
    File currentOpened = null;
    File backOpened = null;
    File currFile = null; 
    int dirNo = 0;
    boolean fileOpened = false;
    DZipper dz;
    
    HashMap<Integer, File> explorer = new HashMap();
    
    public MainFrame(String title, Logger logger1, DZipper dz1) {
        
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        
        dz = dz1;
        
        logger = logger1;
        logger.info("Initalizing components...");
        setTitle(title);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setToolTipText("");
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jList1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Unzip file...");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Open zip file...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        searchZip();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jList1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MousePressed
         if(evt.getClickCount() == 2){
            if(evt.getButton() == 1){  
                if(!jList1.isSelectionEmpty()){
                    String selected = jList1.getModel().getElementAt(jList1.getSelectedIndex()).toString();
                    if(selected.startsWith("[FOLDER] : ")){
                    
                        File f1 = new File(currentOpened + "\\" + selected.replace("[FOLDER] : ", ""));
                        
                        currentOpened = f1;
                        
                        dirNo = dirNo + 1;
                        explorer.put(dirNo, f1);
                        
                        jListModel1.clear();
                        
                        jListModel1.addElement("[...]");
                                
                        for (final File fileEntry : f1.listFiles()) {
                        if(fileEntry.isDirectory()){
              
                           jListModel1.addElement("[FOLDER] : " + fileEntry.getName());
                           jList1.setModel(jListModel1);
                        }
      }
      
       for(File fl : f1.listFiles()){
            if(!fl.isDirectory()){
                  jListModel1.addElement("[FILE] : " + fl.getName());
                  jList1.setModel(jListModel1);
            }
       }
                    
                        
                    }else if(selected.equals("[...]")){
                        
                        File f1 = explorer.get(dirNo - 1);
                        currentOpened = f1;
                                          
                        explorer.remove(dirNo);
                        
                        dirNo = dirNo - 1;
                        
                        jListModel1.clear();
                        
                        if(dirNo != 0){
                        jListModel1.addElement("[...]");
                        }        
                        
                        for (final File fileEntry : f1.listFiles()) {
                        if(fileEntry.isDirectory()){
              
                           jListModel1.addElement("[FOLDER] : " + fileEntry.getName());
                           jList1.setModel(jListModel1);
                        }
      }
      
       for(File fl : f1.listFiles()){
            if(!fl.isDirectory()){
                  jListModel1.addElement("[FILE] : " + fl.getName());
                  jList1.setModel(jListModel1);
            }

                    }
                }
            }
        }
         }
    
    }//GEN-LAST:event_jList1MousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        chooser = new JFileChooser();
                   
               
        chooser.setDialogTitle("Select a directory");
        chooser.setCurrentDirectory(new java.io.File("Desktop"));
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {   
            try {
                ZipFile zf = new ZipFile(currFile);
                chooser.getSelectedFile().mkdirs();
                zf.extractAll(chooser.getSelectedFile().toString());
                logger.info("Extracting "+ currFile.getName() + " to " + chooser.getSelectedFile().toString());
            } catch (ZipException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                DialogForm df = new DialogForm(this, false, "Error while extracting file \n" + ex.getMessage(), "Error");
                df.setVisible(true);
                return;
            }
            
            DialogForm df = new DialogForm(this, false, "   Zip file extracted succesfully!", "Success!");
            df.setVisible(true);
 
        }else{
            System.out.println("No selection.");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void searchZip(){
        chooser = new JFileChooser();
                   
               
        chooser.setDialogTitle("Select a zip file");
        chooser.setCurrentDirectory(new java.io.File("Desktop"));
        chooser.setAcceptAllFileFilterUsed(false);
               
        File file1;
        
     if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
         
      file = true;
      file1 = chooser.getSelectedFile();
      
      if(file1 == null){
          System.out.println("No Selection");
      }else{
          String appdata = System.getenv("APPDATA");
       try {
       ZipFile zipFile = new ZipFile(file1);
         zipFile.extractAll(appdata+"\\DZipper\\tmp\\" + file1.getName() + "\\");
         setTitle("DZipper - " + file1.getName());
         jListModel1.clear();
         jList1.setModel(jListModel1);
    } catch (ZipException e) {
        e.printStackTrace();
        setTitle("DZipper - No file opened");
        DialogForm.main("The file isn't in a valid form or it's corrupted", "Error");
        jButton1.setEnabled(false);
        try{
        dz.exploreDir4Delete(opened);
        }catch (Exception ex){
            System.out.println("Couldn't delete temp files.");
        }
        
        
        jListModel1.clear();
        currFile = null;
        jList1.setModel(jListModel1);
        fileOpened = false;
        return;
    }
       
       if(fileOpened){
           
            try {
                Files.delete(opened.toPath());
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
           
           jButton1.setEnabled(true);
           System.out.println("*Closing "+ opened.getName());
       }
       
       
      System.out.println("--------------------------------");
      
      jButton1.setEnabled(true);
      
      System.out.println("Loading "+ chooser.getSelectedFile().getName() + "...");
       
      opened = new File(appdata+"\\DZipper\\tmp\\" + file1.getName());
      
      int file = 0;
      int dir = 0;
      dirNo = 0;
      currFile = chooser.getSelectedFile();
      
      for (final File fileEntry : new File(appdata+"\\DZipper\\tmp\\" + file1.getName() + "\\").listFiles()) {
          if(fileEntry.isDirectory()){
              dir = dir + 1;
              
              jListModel1.addElement("[FOLDER] : " + fileEntry.getName());
              jList1.setModel(jListModel1);
          }
      }
      
       for(File fl : new File(appdata+"\\DZipper\\tmp\\" + file1.getName() + "\\").listFiles()){
            if(!fl.isDirectory()){
                  file = file + 1;
                  jListModel1.addElement("[FILE] : " + fl.getName());
                  jList1.setModel(jListModel1);
            }
       }
       
       explorer.put(dirNo, new File(appdata+"\\DZipper\\tmp\\" + file1.getName()));
       
       currentOpened = new File(appdata+"\\DZipper\\tmp\\" + file1.getName());
       
       System.out.println("Loaded "+ String.valueOf(file) + " files and " + String.valueOf(dir) + " directories");
       
       
       
       System.out.println("--------------------------------");
      }
      
      }else{
      System.out.println("*No Selection");
      }
}

}
